{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { withRouter } from 'next/router';\nimport Layout from '../components/MyLayout.js';\nimport Markdown from 'react-markdown'; // const Content = withRouter((props) => (\n//   <div>\n//     <h1>{props.router.query.title}</h1>\n//     <p>This is the blog post content.</p>\n//   </div>\n// ))\n// const Page = (props) => (\n//     <Layout>\n//        <Content />\n//     </Layout>\n// )\n// export default Page\n\nvar Post = function Post(props) {\n  return __jsx(Layout, null, __jsx(\"h1\", {\n    className: \"jsx-1485130086\"\n  }, props.show.name), __jsx(\"p\", {\n    className: \"jsx-1485130086\"\n  }, props.show.summary.replace(/<[/]?p>/g, '')), __jsx(Markdown, {\n    source: \"\\n        This is our blog post.\\n        Yes. We can have a [link](/link).\\n        And we can have a title as well.\\n\\n        ### This is a title\\n\\n        And here's the content.\\n        \"\n  }), __jsx(_JSXStyle, {\n    id: \"1485130086\"\n  }, [\".markdown{font-family:'Arial';}\", \".markdown a{-webkit-text-decoration:none;text-decoration:none;color:blue;}\", \".markdown a:hover{opacity:0.6;}\", \".markdown h3{margin:0;padding:0;text-transform:uppercase;}\"]));\n}; // 第一引数のcontextオブジェクトはfetchに使えるクエリ情報を持っている\n\n\nPost.getInitialProps = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n    var id, res, show;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            id = context.query.id;\n            _context.next = 3;\n            return fetch(\"https://api.tvmaze.com/shows/\".concat(id));\n\n          case 3:\n            res = _context.sent;\n            _context.next = 6;\n            return res.json();\n\n          case 6:\n            show = _context.sent;\n            console.log(\"Fetched show: \".concat(show.name)); // aタグで遷移してくると、ブラウザのコンソールで表示。なぜなら、ページ遷移はクライアントサイドでのみ起きていることだから。URLで直接入った場合、サーバー側に出力される。\n\n            return _context.abrupt(\"return\", {\n              show: show\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default Post;","map":null,"metadata":{},"sourceType":"module"}